name: Update README with All GitHub Contributions
on:
  schedule:
    - cron: "0 17 * * *"
  workflow_dispatch:
permissions:
  contents: write
jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout profile repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: Faturrachman-dev/faturrachman-dev
          path: faturrachman-dev

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Count All Contributions
        env:
          COMMIT_COUNTER_TOKEN: ${{ secrets.COMMIT_COUNTER_TOKEN }}
        run: |
          # Calculate the start of yesterday in WIB (UTC+7)
          YESTERDAY_START=$(TZ=Asia/Jakarta date -d "yesterday" +%Y-%m-%d)
          YESTERDAY_START_UTC=$(date -u -d "$YESTERDAY_START 00:00:00 -7 hours" +%Y-%m-%dT%H:%M:%SZ)
          echo "Counting yesterday's contributions since: $YESTERDAY_START_UTC (00:00 WIB yesterday)"

          # Calculate the start of the current month in WIB
          MONTH_START=$(TZ=Asia/Jakarta date +%Y-%m-01)
          MONTH_START_UTC=$(date -u -d "$MONTH_START 00:00:00 -7 hours" +%Y-%m-%dT%H:%M:%SZ)
          CURRENT_MONTH=$(TZ=Asia/Jakarta date +%Y-%m)
          echo "Counting this month's contributions since: $MONTH_START_UTC (start of $CURRENT_MONTH)"

          # Function to count GitHub events by type within a date range
          count_events_by_type() {
            local since_date=$1
            local until_date=$2
            local events_file=$3
            local day_key=$4
            
            # Fetch all events with pagination (up to 300 events - 3 pages)
            local page=1
            local total_pages=3  # GitHub API limits to 10 pages, but 3 should be enough for daily activity
            rm -f "$events_file" 2>/dev/null
            
            while [ $page -le $total_pages ]; do
              echo "Fetching events page $page..."
              local response=$(curl -s -H "Authorization: Bearer $COMMIT_COUNTER_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/users/Faturrachman-dev/events?per_page=100&page=$page")
              
              # Check if response is valid
              if ! echo "$response" | jq . > /dev/null 2>&1; then
                echo "Error: Invalid response for events page $page"
                break
              fi
              
              # Check if response is empty
              if [ "$(echo "$response" | jq length)" -eq 0 ]; then
                echo "No more events found."
                break
              fi
              
              # Append to events file
              echo "$response" | jq . >> "$events_file"
              
              # Check if there are more pages
              local link_header=$(curl -s -I -H "Authorization: Bearer $COMMIT_COUNTER_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/users/Faturrachman-dev/events?per_page=100&page=$page" | grep -i '^link:' || true)
              
              if [[ ! "$link_header" =~ "rel=\"next\"" ]]; then
                break
              fi
              
              page=$((page + 1))
              sleep 1  # Avoid rate limiting
            done
            
            # Merge all pages into a single JSON array
            if [ -f "$events_file" ]; then
              jq -s 'add | .[]' "$events_file" > "${events_file}.merged"
              mv "${events_file}.merged" "$events_file"
            fi
            
            # Count events by type within the date range
            if [ -f "$events_file" ]; then
              # Initialize counters
              local push_events=0
              local total_commits=0
              local create_events=0
              local issues_events=0
              local issue_comments=0
              local pr_events=0
              local pr_reviews=0
              local pr_review_comments=0
              local commit_comments=0
              local fork_events=0
              local watch_events=0
              local release_events=0
              local public_events=0
              
              # Process events manually instead of using complex jq query
              while read -r event_line; do
                event_type=$(echo "$event_line" | jq -r '.type')
                event_date=$(echo "$event_line" | jq -r '.created_at')
                
                # Check if event is within date range
                if [[ "$event_date" > "$since_date" && "$event_date" < "$until_date" ]]; then
                  case "$event_type" in
                    "PushEvent")
                      push_events=$((push_events + 1))
                      # Count commits in this push
                      commit_count=$(echo "$event_line" | jq -r '.payload.size // 0')
                      total_commits=$((total_commits + commit_count))
                      ;;
                    "CreateEvent") create_events=$((create_events + 1)) ;;
                    "IssuesEvent") issues_events=$((issues_events + 1)) ;;
                    "IssueCommentEvent") issue_comments=$((issue_comments + 1)) ;;
                    "PullRequestEvent") pr_events=$((pr_events + 1)) ;;
                    "PullRequestReviewEvent") pr_reviews=$((pr_reviews + 1)) ;;
                    "PullRequestReviewCommentEvent") pr_review_comments=$((pr_review_comments + 1)) ;;
                    "CommitCommentEvent") commit_comments=$((commit_comments + 1)) ;;
                    "ForkEvent") fork_events=$((fork_events + 1)) ;;
                    "WatchEvent") watch_events=$((watch_events + 1)) ;;
                    "ReleaseEvent") release_events=$((release_events + 1)) ;;
                    "PublicEvent") public_events=$((public_events + 1)) ;;
                  esac
                fi
              done < <(jq -c '.[]' "$events_file" 2>/dev/null || echo '{}')
              
              # Calculate total contributions
              local other_contributions=$((create_events + issues_events + issue_comments + pr_events + pr_reviews + pr_review_comments + commit_comments + fork_events + watch_events + release_events + public_events))
              local total_contributions=$((total_commits + other_contributions))
              
              # Set environment variables
              echo "$day_key=$total_contributions" >> $GITHUB_ENV
              echo "COMMITS_$day_key=$total_commits" >> $GITHUB_ENV
              echo "OTHER_$day_key=$other_contributions" >> $GITHUB_ENV
              
              # Output counts for debugging
              echo "Event counts for $day_key:"
              echo "  Push events: $push_events (with $total_commits commits)"
              echo "  Create events: $create_events"
              echo "  Issues events: $issues_events"
              echo "  Issue comments: $issue_comments"
              echo "  PR events: $pr_events"
              echo "  PR reviews: $pr_reviews"
              echo "  PR review comments: $pr_review_comments"
              echo "  Commit comments: $commit_comments"
              echo "  Fork events: $fork_events"
              echo "  Watch events: $watch_events"
              echo "  Release events: $release_events"
              echo "  Public events: $public_events"
              echo "  Total contributions: $total_contributions"
              
              return $total_contributions
            else
              echo "No events file found!"
              echo "$day_key=0" >> $GITHUB_ENV
              echo "COMMITS_$day_key=0" >> $GITHUB_ENV
              echo "OTHER_$day_key=0" >> $GITHUB_ENV
              return 0
            fi
          }
          
          # Count yesterday's contributions
          YESTERDAY_END_UTC=$(date -u -d "$YESTERDAY_START 23:59:59 +7 hours" +%Y-%m-%dT%H:%M:%SZ)
          echo "Counting yesterday's contributions from $YESTERDAY_START_UTC to $YESTERDAY_END_UTC"
          count_events_by_type "$YESTERDAY_START_UTC" "$YESTERDAY_END_UTC" "yesterday_events.json" "TODAY_CONTRIBUTIONS"
          
          # Legacy ENV variables for backward compatibility
          echo "TODAY_COMMITS=${COMMITS_TODAY_CONTRIBUTIONS}" >> $GITHUB_ENV
          
          # Get contributions for each day of the current month to calculate total
          TOTAL_MONTH_CONTRIBUTIONS=0
          TOTAL_MONTH_COMMITS=0
          
          # Reset if we're in a new month
          PREV_MONTH_CONTRIBUTIONS=0
          PREV_MONTH_COMMITS=0
          
          if grep -q "<!-- MONTH_COMMITS:" faturrachman-dev/README.md; then
            PREV_MONTH_COMMITS=$(grep "<!-- MONTH_COMMITS:" faturrachman-dev/README.md | sed 's/<!-- MONTH_COMMITS: \([0-9]\+\) .* -->/\1/')
            PREV_MONTH=$(grep "<!-- MONTH_COMMITS:" faturrachman-dev/README.md | sed 's/<!-- MONTH_COMMITS: [0-9]\+ \(.*\) -->/\1/')
          fi
          
          if grep -q "<!-- MONTH_CONTRIBUTIONS:" faturrachman-dev/README.md; then
            PREV_MONTH_CONTRIBUTIONS=$(grep "<!-- MONTH_CONTRIBUTIONS:" faturrachman-dev/README.md | sed 's/<!-- MONTH_CONTRIBUTIONS: \([0-9]\+\) .* -->/\1/')
            PREV_MONTH_CONTR=$(grep "<!-- MONTH_CONTRIBUTIONS:" faturrachman-dev/README.md | sed 's/<!-- MONTH_CONTRIBUTIONS: [0-9]\+ \(.*\) -->/\1/')
          fi
          
          # Count the entire month's contributions at once
          echo "Counting contributions for the entire month..."
          MONTH_END_UTC=$(date -u -d "$(date +%Y-%m-01) +1 month -1 day 23:59:59 +7 hours" +%Y-%m-%dT%H:%M:%SZ)
          count_events_by_type "$MONTH_START_UTC" "$MONTH_END_UTC" "month_events.json" "MONTH_ALL"
          
          # Make sure we have values in the environment variables
          if [ -z "${MONTH_ALL}" ]; then
            MONTH_ALL=0
            echo "MONTH_ALL=0" >> $GITHUB_ENV
          fi
          
          if [ -z "${COMMITS_MONTH_ALL}" ]; then
            COMMITS_MONTH_ALL=0
            echo "COMMITS_MONTH_ALL=0" >> $GITHUB_ENV 
          fi
          
          if [ -z "${TODAY_CONTRIBUTIONS}" ]; then
            TODAY_CONTRIBUTIONS=0
            echo "TODAY_CONTRIBUTIONS=0" >> $GITHUB_ENV
          fi
          
          if [ -z "${COMMITS_TODAY_CONTRIBUTIONS}" ]; then
            COMMITS_TODAY_CONTRIBUTIONS=0
            echo "COMMITS_TODAY_CONTRIBUTIONS=0" >> $GITHUB_ENV
          fi
          
          # Set environment variables for downstream steps
          if [[ "$PREV_MONTH" != "$CURRENT_MONTH" || "$PREV_MONTH_CONTR" != "$CURRENT_MONTH" ]]; then
            echo "New month detected or first run, using fresh counts"
            MONTH_CONTRIBUTIONS=${MONTH_ALL}
            MONTH_COMMITS=${COMMITS_MONTH_ALL}
          else
            echo "Same month, using previous counts plus yesterday's contributions"
            # Use the stored counts and add yesterday's to them
            MONTH_CONTRIBUTIONS=$((PREV_MONTH_CONTRIBUTIONS + TODAY_CONTRIBUTIONS))
            MONTH_COMMITS=$((PREV_MONTH_COMMITS + COMMITS_TODAY_CONTRIBUTIONS))
          fi
          
          # Make sure MONTH_CONTRIBUTIONS has a value (defaults to 0)
          if [ -z "${MONTH_CONTRIBUTIONS}" ]; then
            MONTH_CONTRIBUTIONS=0
          fi
          
          # Make sure MONTH_COMMITS has a value (defaults to 0)
          if [ -z "${MONTH_COMMITS}" ]; then
            MONTH_COMMITS=0
          fi
          
          echo "MONTH_CONTRIBUTIONS=$MONTH_CONTRIBUTIONS" >> $GITHUB_ENV
          echo "MONTH_COMMITS=$MONTH_COMMITS" >> $GITHUB_ENV
          echo "CURRENT_MONTH=$CURRENT_MONTH" >> $GITHUB_ENV
          
          echo "Summary:"
          echo "  Yesterday's commits: ${COMMITS_TODAY_CONTRIBUTIONS:-0}"
          echo "  Yesterday's other contributions: ${OTHER_TODAY_CONTRIBUTIONS:-0}"
          echo "  Yesterday's total contributions: ${TODAY_CONTRIBUTIONS:-0}"
          echo "  This month's commits: ${MONTH_COMMITS:-0}"
          echo "  This month's total contributions: ${MONTH_CONTRIBUTIONS:-0}"

      - name: Update README
        run: |
          # Update the placeholder in the comment line for yesterday's commits
          if grep -q "<!-- TODAY_COMMITS:" faturrachman-dev/README.md; then
            sed -i "s/<!-- TODAY_COMMITS: [0-9]\+ -->/<!-- TODAY_COMMITS: $TODAY_COMMITS -->/g" faturrachman-dev/README.md
          else
            echo "<!-- TODAY_COMMITS: $TODAY_COMMITS -->" >> faturrachman-dev/README.md
            echo "![Yesterday's Commits](https://img.shields.io/badge/Yesterday's%20Commits-$TODAY_COMMITS-blue)" >> faturrachman-dev/README.md
          fi
          # Update the badge line for yesterday's commits
          if grep -q "Yesterday's%20Commits-[0-9]\+-blue" faturrachman-dev/README.md; then
            sed -i "s/\(Yesterday's%20Commits-\)[0-9]\+\(-blue\)/\1$TODAY_COMMITS\2/" faturrachman-dev/README.md
          fi
          
          # Add yesterday's total contributions
          if grep -q "<!-- TODAY_CONTRIBUTIONS:" faturrachman-dev/README.md; then
            sed -i "s/<!-- TODAY_CONTRIBUTIONS: [0-9]\+ -->/<!-- TODAY_CONTRIBUTIONS: $TODAY_CONTRIBUTIONS -->/g" faturrachman-dev/README.md
          else
            echo "<!-- TODAY_CONTRIBUTIONS: $TODAY_CONTRIBUTIONS -->" >> faturrachman-dev/README.md
            echo "![Yesterday's Contributions](https://img.shields.io/badge/Yesterday's%20Contributions-$TODAY_CONTRIBUTIONS-purple)" >> faturrachman-dev/README.md
          fi
          # Update the badge line for yesterday's contributions
          if grep -q "Yesterday's%20Contributions-[0-9]\+-purple" faturrachman-dev/README.md; then
            sed -i "s/\(Yesterday's%20Contributions-\)[0-9]\+\(-purple\)/\1$TODAY_CONTRIBUTIONS\2/" faturrachman-dev/README.md
          fi

          # Update the placeholder in the comment line for monthly commits
          if grep -q "<!-- MONTH_COMMITS:" faturrachman-dev/README.md; then
            sed -i "s/<!-- MONTH_COMMITS: [0-9]\+ .* -->/<!-- MONTH_COMMITS: $MONTH_COMMITS $CURRENT_MONTH -->/g" faturrachman-dev/README.md
          else
            echo "<!-- MONTH_COMMITS: $MONTH_COMMITS $CURRENT_MONTH -->" >> faturrachman-dev/README.md
            echo "![This Month's Commits](https://img.shields.io/badge/This%20Month's%20Commits-$MONTH_COMMITS-green)" >> faturrachman-dev/README.md
          fi
          # Update the badge line for monthly commits
          if grep -q "This%20Month's%20Commits-[0-9]\+-green" faturrachman-dev/README.md; then
            sed -i "s/\(This%20Month's%20Commits-\)[0-9]\+\(-green\)/\1$MONTH_COMMITS\2/" faturrachman-dev/README.md
          fi
          
          # Add monthly total contributions
          if grep -q "<!-- MONTH_CONTRIBUTIONS:" faturrachman-dev/README.md; then
            sed -i "s/<!-- MONTH_CONTRIBUTIONS: [0-9]\+ .* -->/<!-- MONTH_CONTRIBUTIONS: $MONTH_CONTRIBUTIONS $CURRENT_MONTH -->/g" faturrachman-dev/README.md
          else
            echo "<!-- MONTH_CONTRIBUTIONS: $MONTH_CONTRIBUTIONS $CURRENT_MONTH -->" >> faturrachman-dev/README.md
            echo "![This Month's Contributions](https://img.shields.io/badge/This%20Month's%20Contributions-$MONTH_CONTRIBUTIONS-orange)" >> faturrachman-dev/README.md
          fi
          # Update the badge line for monthly contributions
          if grep -q "This%20Month's%20Contributions-[0-9]\+-orange" faturrachman-dev/README.md; then
            sed -i "s/\(This%20Month's%20Contributions-\)[0-9]\+\(-orange\)/\1$MONTH_CONTRIBUTIONS\2/" faturrachman-dev/README.md
          fi

      - name: Commit and Push Changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update GitHub contribution statistics"
          repository: faturrachman-dev
