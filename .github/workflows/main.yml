name: Update README with GitHub Contributions
on:
  schedule:
    - cron: "0 17 * * *"
  workflow_dispatch:
permissions:
  contents: write
jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout profile repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: Faturrachman-dev/faturrachman-dev
          path: faturrachman-dev

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Count Contributions
        env:
          COMMIT_COUNTER_TOKEN: ${{ secrets.COMMIT_COUNTER_TOKEN }}
        run: |
          # Calculate the start of today in WIB (UTC+7)
          TODAY_START=$(TZ=Asia/Jakarta date +%Y-%m-%d)
          TODAY_START_UTC=$(date -u -d "$TODAY_START 00:00:00 -7 hours" +%Y-%m-%dT%H:%M:%SZ)
          echo "Counting today's contributions since: $TODAY_START_UTC (00:00 WIB today)"

          # Calculate the start of the current month in WIB
          MONTH_START=$(TZ=Asia/Jakarta date +%Y-%m-01)
          MONTH_START_UTC=$(date -u -d "$MONTH_START 00:00:00 -7 hours" +%Y-%m-%dT%H:%M:%SZ)
          CURRENT_MONTH=$(TZ=Asia/Jakarta date +%Y-%m)
          echo "Counting this month's contributions since: $MONTH_START_UTC (start of $CURRENT_MONTH)"

          # Optimized function to count GitHub contributions using the GitHub API
          count_contributions() {
            local since_date="$1"
            local until_date="$2"
            
            echo "Fetching contributions from $since_date to $until_date..."
            
            # Initialize counters
            local total_contributions=0
            local total_events=0
            
            # Fetch and process GitHub events (up to 2 pages - optimized)
            for page in {1..2}; do
              echo "Fetching events page $page..."
              
              # Use -s for silent mode and capture the response in a variable
              local response=$(curl -s -H "Authorization: Bearer $COMMIT_COUNTER_TOKEN" \
              -H "Accept: application/vnd.github+json" \
                "https://api.github.com/users/Faturrachman-dev/events?per_page=100&page=$page")
              
              # Check if we got a valid response (should be a JSON array)
              if ! echo "$response" | jq -e 'if type=="array" then true else false end' > /dev/null; then
                echo "Warning: Invalid response format from API. Expected JSON array."
                break
              fi
              
              # Check if array is empty
              if [ "$(echo "$response" | jq 'length')" -eq 0 ]; then
                echo "No more events found."
                break
              fi
              
              # Process each event
              local event_count=$(echo "$response" | jq 'length')
              echo "Processing $event_count events from page $page..."
              
              # Extract events within our date range in a single jq operation (optimized)
              local events_in_range=$(echo "$response" | jq --arg since "$since_date" --arg until "$until_date" \
                '[.[] | select(.created_at >= $since and .created_at <= $until)]')
              
              # Count events in range
              local range_count=$(echo "$events_in_range" | jq 'length')
              total_events=$((total_events + range_count))
              
              # Count contributions (each event counts as a contribution)
              total_contributions=$((total_contributions + range_count))
              
              # Check if there are more pages
              if [ "$event_count" -lt 100 ]; then
                echo "No more pages to fetch."
                break
              fi
            done
            
            # Output result summary
            echo "Contribution summary for period $since_date to $until_date:"
            echo "  Total GitHub events: $total_events"
            echo "  Total contributions: $total_contributions"
            
            # Return total contributions
            echo "RESULT:$total_contributions"
          }

          # Count today's contributions
          TODAY_END_UTC=$(date -u -d "$TODAY_START 23:59:59 +7 hours" +%Y-%m-%dT%H:%M:%SZ)
          echo "Counting today's contributions from $TODAY_START_UTC to $TODAY_END_UTC"
          
          # Capture function return values
          TODAY_OUTPUT=$(count_contributions "$TODAY_START_UTC" "$TODAY_END_UTC")
          TODAY_CONTRIBUTIONS=$(echo "$TODAY_OUTPUT" | grep "^RESULT:" | cut -d':' -f2- || echo "0")
          
          # Export values to GitHub Actions environment
          echo "TODAY_CONTRIBUTIONS=${TODAY_CONTRIBUTIONS:-0}" >> $GITHUB_ENV
          
          # Get previous month data from README
          PREV_MONTH_CONTRIBUTIONS=0
          
          if grep -q "<!-- MONTH_CONTRIBUTIONS:" faturrachman-dev/README.md; then
            PREV_MONTH_CONTRIBUTIONS=$(grep "<!-- MONTH_CONTRIBUTIONS:" faturrachman-dev/README.md | sed 's/<!-- MONTH_CONTRIBUTIONS: \([0-9]\+\) .* -->/\1/')
            PREV_MONTH=$(grep "<!-- MONTH_CONTRIBUTIONS:" faturrachman-dev/README.md | sed 's/<!-- MONTH_CONTRIBUTIONS: [0-9]\+ \(.*\) -->/\1/')
          fi
          
          # Count the entire month's contributions
          echo "Counting contributions for the entire month..."
          MONTH_END_UTC=$(date -u -d "$(date +%Y-%m-01) +1 month -1 day 23:59:59 +7 hours" +%Y-%m-%dT%H:%M:%SZ)
          
          # Capture function return values for month
          MONTH_OUTPUT=$(count_contributions "$MONTH_START_UTC" "$MONTH_END_UTC")
          MONTH_CONTRIBUTIONS=$(echo "$MONTH_OUTPUT" | grep "^RESULT:" | cut -d':' -f2- || echo "0")
          
          # Determine final month totals
          if [[ "$PREV_MONTH" != "$CURRENT_MONTH" ]]; then
            echo "New month detected or first run, using fresh counts"
          else
            echo "Same month, using previous counts plus today's contributions"
            # Use the stored count to avoid running the full month query again
            MONTH_CONTRIBUTIONS=$PREV_MONTH_CONTRIBUTIONS
          fi
          
          # Export month values to GitHub Actions environment
          echo "MONTH_CONTRIBUTIONS=${MONTH_CONTRIBUTIONS:-0}" >> $GITHUB_ENV
          echo "CURRENT_MONTH=$CURRENT_MONTH" >> $GITHUB_ENV
          
          echo "Final Summary:"
          echo "  Today's contributions: $TODAY_CONTRIBUTIONS"
          echo "  This month's contributions: $MONTH_CONTRIBUTIONS"

      - name: Update README
        run: |
          # Ensure values are numbers or default to 0
          TODAY_CONTRIBUTIONS=${TODAY_CONTRIBUTIONS:-0}
          MONTH_CONTRIBUTIONS=${MONTH_CONTRIBUTIONS:-0}
          
          # Update today's contributions
          if grep -q "<!-- TODAY_CONTRIBUTIONS:" faturrachman-dev/README.md; then
            sed -i "s/<!-- TODAY_CONTRIBUTIONS:.*-->/<!-- TODAY_CONTRIBUTIONS: $TODAY_CONTRIBUTIONS -->/g" faturrachman-dev/README.md
          else
            echo "<!-- TODAY_CONTRIBUTIONS: $TODAY_CONTRIBUTIONS -->" >> faturrachman-dev/README.md
            echo "![Today's Contributions](https://img.shields.io/badge/Today's%20Contributions-$TODAY_CONTRIBUTIONS-purple)" >> faturrachman-dev/README.md
          fi
          
          # Update the badge line for today's contributions
          if grep -q "Today's%20Contributions-.*-purple" faturrachman-dev/README.md; then
            sed -i "s/Today's%20Contributions-.*-purple/Today's%20Contributions-$TODAY_CONTRIBUTIONS-purple/g" faturrachman-dev/README.md
          elif grep -q "Yesterday's%20Contributions-.*-purple" faturrachman-dev/README.md; then
            sed -i "s/Yesterday's%20Contributions-.*-purple/Today's%20Contributions-$TODAY_CONTRIBUTIONS-purple/g" faturrachman-dev/README.md
          fi
          
          # Update monthly contributions
          if grep -q "<!-- MONTH_CONTRIBUTIONS:" faturrachman-dev/README.md; then
            sed -i "s/<!-- MONTH_CONTRIBUTIONS:.*-->/<!-- MONTH_CONTRIBUTIONS: $MONTH_CONTRIBUTIONS $CURRENT_MONTH -->/g" faturrachman-dev/README.md
          else
            echo "<!-- MONTH_CONTRIBUTIONS: $MONTH_CONTRIBUTIONS $CURRENT_MONTH -->" >> faturrachman-dev/README.md
            echo "![This Month's Contributions](https://img.shields.io/badge/This%20Month's%20Contributions-$MONTH_CONTRIBUTIONS-orange)" >> faturrachman-dev/README.md
          fi
          
          # Update the badge line for monthly contributions
          if grep -q "This%20Month's%20Contributions-.*-orange" faturrachman-dev/README.md; then
            sed -i "s/This%20Month's%20Contributions-.*-orange/This%20Month's%20Contributions-$MONTH_CONTRIBUTIONS-orange/g" faturrachman-dev/README.md
          fi
          
          # Remove any remaining commit badges if they exist
          if grep -q "TODAY_COMMITS:" faturrachman-dev/README.md; then
            sed -i "/<!-- TODAY_COMMITS:/d" faturrachman-dev/README.md
          fi
          
          if grep -q "Today's%20Commits-.*-blue" faturrachman-dev/README.md || grep -q "Yesterday's%20Commits-.*-blue" faturrachman-dev/README.md; then
            sed -i "/\!\[.*Commits\](https:\/\/img\.shields\.io\/badge\/.*Commits-.*/d" faturrachman-dev/README.md
          fi
          
          if grep -q "MONTH_COMMITS:" faturrachman-dev/README.md; then
            sed -i "/<!-- MONTH_COMMITS:/d" faturrachman-dev/README.md
          fi
          
          if grep -q "This%20Month's%20Commits-.*-green" faturrachman-dev/README.md; then
            sed -i "/\!\[This Month's Commits\](https:\/\/img\.shields\.io\/badge\/This%20Month's%20Commits-.*/d" faturrachman-dev/README.md
          fi

      - name: Commit and Push Changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update GitHub contribution statistics"
          repository: faturrachman-dev
