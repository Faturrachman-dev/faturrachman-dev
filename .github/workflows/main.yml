name: Update README with All GitHub Contributions
on:
  schedule:
    - cron: "0 17 * * *"
  workflow_dispatch:
permissions:
  contents: write
jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout profile repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: Faturrachman-dev/faturrachman-dev
          path: faturrachman-dev

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Count All Contributions
        env:
          COMMIT_COUNTER_TOKEN: ${{ secrets.COMMIT_COUNTER_TOKEN }}
        run: |
          # Create logs directory
          mkdir -p logs
          
          # Calculate yesterday's date in different formats (UTC and WIB/Jakarta time)
          YESTERDAY_DATE=$(TZ=Asia/Jakarta date -d "yesterday" +%Y-%m-%d)
          YESTERDAY_START_UTC=$(date -u -d "$YESTERDAY_DATE 00:00:00 -7 hours" +%Y-%m-%dT%H:%M:%SZ)
          YESTERDAY_END_UTC=$(date -u -d "$YESTERDAY_DATE 23:59:59 -7 hours" +%Y-%m-%dT%H:%M:%SZ)
          echo "Counting contributions for: $YESTERDAY_DATE (00:00-23:59 WIB)"
          echo "UTC time range: $YESTERDAY_START_UTC to $YESTERDAY_END_UTC"

          # Calculate month start for monthly stats
          MONTH_START=$(TZ=Asia/Jakarta date +%Y-%m-01)
          MONTH_START_UTC=$(date -u -d "$MONTH_START 00:00:00 -7 hours" +%Y-%m-%dT%H:%M:%SZ)
          CURRENT_MONTH=$(TZ=Asia/Jakarta date +%Y-%m)
          echo "Current month: $CURRENT_MONTH (starting $MONTH_START_UTC)"
          
          # Get the user profile info
          echo "Getting GitHub user profile info..."
          USER_INFO=$(curl -s -H "Authorization: Bearer $COMMIT_COUNTER_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/user")
          
          GITHUB_USERNAME=$(echo "$USER_INFO" | jq -r '.login')
          GITHUB_EMAIL=$(echo "$USER_INFO" | jq -r '.email')
          echo "GitHub username: $GITHUB_USERNAME"
          echo "GitHub email: $GITHUB_EMAIL"
          
          # Get all repositories (including private and org repos the user has access to)
          echo "Fetching all repositories..."
          REPOS_RESPONSE=$(curl -s -H "Authorization: Bearer $COMMIT_COUNTER_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/user/repos?per_page=100&affiliation=owner,collaborator,organization_member")
          
          REPO_COUNT=$(echo "$REPOS_RESPONSE" | jq '. | length')
          echo "Found $REPO_COUNT repositories to check"
          
          # Initialize counters
          TOTAL_COMMITS=0
          ISSUE_COUNT=0
          PR_COUNT=0
          COMMENT_COUNT=0
          REVIEW_COUNT=0
          CREATE_COUNT=0
          DELETE_COUNT=0
          FORK_COUNT=0
          WATCH_COUNT=0
          
          # Check each repository individually for commits
          echo "Scanning individual repositories for commits..."
          echo "$REPOS_RESPONSE" | jq -r '.[].full_name' > logs/all_repos.txt
          
          while IFS= read -r REPO; do
            echo "Checking commits in repository: $REPO"
            REPO_COMMITS=$(curl -s -H "Authorization: Bearer $COMMIT_COUNTER_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/$REPO/commits?since=$YESTERDAY_START_UTC&until=$YESTERDAY_END_UTC&author=$GITHUB_USERNAME")
            
            if echo "$REPO_COMMITS" | jq -e 'if type=="array" then true else false end' > /dev/null; then
              REPO_COMMIT_COUNT=$(echo "$REPO_COMMITS" | jq '. | length')
              
              # Only process if we actually got commits
              if [ "$REPO_COMMIT_COUNT" -gt 0 ]; then
                echo "Found $REPO_COMMIT_COUNT commits in $REPO"
                TOTAL_COMMITS=$((TOTAL_COMMITS + REPO_COMMIT_COUNT))
                
                # Save details for logging
                echo "$REPO_COMMITS" | jq -r '.[] | "\(.commit.author.date) - \(.commit.message | split("\n")[0])"' > logs/${REPO//\//_}_commits.txt
              fi
            else
              echo "No valid response for $REPO"
            fi
            
            # Check for issues and PRs in this repository
            echo "Checking issues and PRs in repository: $REPO"
            REPO_ISSUES=$(curl -s -H "Authorization: Bearer $COMMIT_COUNTER_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/$REPO/issues?state=all&since=$YESTERDAY_START_UTC")
            
            if echo "$REPO_ISSUES" | jq -e 'if type=="array" then true else false end' > /dev/null; then
              # Process each issue/PR
              echo "$REPO_ISSUES" | jq -c '.[]' | while read -r ISSUE; do
                CREATED_AT=$(echo "$ISSUE" | jq -r '.created_at')
                ISSUE_USER=$(echo "$ISSUE" | jq -r '.user.login')
                IS_PR=$(echo "$ISSUE" | jq -r 'if .pull_request then "true" else "false" end')
                
                # Only count if within our time window and created by our user
                if [[ "$CREATED_AT" > "$YESTERDAY_START_UTC" ]] && 
                   [[ "$CREATED_AT" < "$YESTERDAY_END_UTC" ]] && 
                   [[ "$ISSUE_USER" == "$GITHUB_USERNAME" ]]; then
                  if [[ "$IS_PR" == "true" ]]; then
                    PR_COUNT=$((PR_COUNT + 1))
                    echo "Found PR: $CREATED_AT - $(echo "$ISSUE" | jq -r '.title')"
                  else
                    ISSUE_COUNT=$((ISSUE_COUNT + 1))
                    echo "Found issue: $CREATED_AT - $(echo "$ISSUE" | jq -r '.title')"
                  fi
                fi
                
                # Check for comments on this issue/PR
                COMMENTS_COUNT=$(echo "$ISSUE" | jq -r '.comments')
                if [ "$COMMENTS_COUNT" -gt 0 ]; then
                  COMMENTS_URL=$(echo "$ISSUE" | jq -r '.comments_url')
                  COMMENTS=$(curl -s -H "Authorization: Bearer $COMMIT_COUNTER_TOKEN" \
                    -H "Accept: application/vnd.github+json" \
                    "$COMMENTS_URL")
                  
                  echo "$COMMENTS" | jq -c '.[]' | while read -r COMMENT; do
                    COMMENT_DATE=$(echo "$COMMENT" | jq -r '.created_at')
                    COMMENT_USER=$(echo "$COMMENT" | jq -r '.user.login')
                    
                    if [[ "$COMMENT_DATE" > "$YESTERDAY_START_UTC" ]] && 
                       [[ "$COMMENT_DATE" < "$YESTERDAY_END_UTC" ]] && 
                       [[ "$COMMENT_USER" == "$GITHUB_USERNAME" ]]; then
                      COMMENT_COUNT=$((COMMENT_COUNT + 1))
                      echo "Found comment: $COMMENT_DATE"
                    fi
                  done
                fi
              done
            fi
          done < logs/all_repos.txt
          
          # Now check GitHub events API for additional contributions
          echo "Checking GitHub events API for additional contributions..."
          EVENTS=$(curl -s -H "Authorization: Bearer $COMMIT_COUNTER_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/users/$GITHUB_USERNAME/events?per_page=100")
          
          # Process each event
          echo "$EVENTS" | jq -c '.[]' | while read -r EVENT; do
            EVENT_TYPE=$(echo "$EVENT" | jq -r '.type')
            EVENT_DATE=$(echo "$EVENT" | jq -r '.created_at')
            
            # Only process events in our time window
            if [[ "$EVENT_DATE" > "$YESTERDAY_START_UTC" ]] && [[ "$EVENT_DATE" < "$YESTERDAY_END_UTC" ]]; then
              case "$EVENT_TYPE" in
                "PullRequestReviewEvent")
                  REVIEW_COUNT=$((REVIEW_COUNT + 1))
                  ;;
                "CreateEvent")
                  CREATE_COUNT=$((CREATE_COUNT + 1))
                  ;;
                "DeleteEvent")
                  DELETE_COUNT=$((DELETE_COUNT + 1))
                  ;;
                "ForkEvent")
                  FORK_COUNT=$((FORK_COUNT + 1))
                  ;;
                "WatchEvent")
                  WATCH_COUNT=$((WATCH_COUNT + 1))
                  ;;
              esac
            fi
          done
          
          # Additional check: try the search API for any missed commits
          echo "Checking for any missed commits via search API..."
          SEARCH_COMMITS=$(curl -s -H "Authorization: Bearer $COMMIT_COUNTER_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/search/commits?q=author:$GITHUB_USERNAME+committer-date:$YESTERDAY_DATE&sort=committer-date&order=desc&per_page=100")
            
          SEARCH_COMMIT_COUNT=$(echo "$SEARCH_COMMITS" | jq '.total_count // 0')
          echo "Search API found $SEARCH_COMMIT_COUNT commits"
          
          # Compare with our direct count and take the higher number
          if [ "$SEARCH_COMMIT_COUNT" -gt "$TOTAL_COMMITS" ]; then
            echo "Using search API count as it's higher: $SEARCH_COMMIT_COUNT vs $TOTAL_COMMITS"
            TOTAL_COMMITS=$SEARCH_COMMIT_COUNT
          fi
          
          # Also check alternate email addresses for commits
          if [ ! -z "$GITHUB_EMAIL" ]; then
            EMAIL_COMMITS=$(curl -s -H "Authorization: Bearer $COMMIT_COUNTER_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/search/commits?q=author-email:$GITHUB_EMAIL+committer-date:$YESTERDAY_DATE&sort=committer-date&order=desc&per_page=100")
              
            EMAIL_COMMIT_COUNT=$(echo "$EMAIL_COMMITS" | jq '.total_count // 0')
            echo "Found $EMAIL_COMMIT_COUNT commits by email: $GITHUB_EMAIL"
            
            # Add unique commits from email search if not already counted
            if [ "$EMAIL_COMMIT_COUNT" -gt 0 ]; then
              # Extract SHAs from both queries to find unique commits
              SEARCH_SHAS=$(echo "$SEARCH_COMMITS" | jq -r '.items[].sha')
              EMAIL_SHAS=$(echo "$EMAIL_COMMITS" | jq -r '.items[].sha')
              
              # Count unique SHAs in EMAIL_SHAS not in SEARCH_SHAS
              UNIQUE_EMAIL_COMMITS=0
              for SHA in $EMAIL_SHAS; do
                if ! echo "$SEARCH_SHAS" | grep -q "$SHA"; then
                  UNIQUE_EMAIL_COMMITS=$((UNIQUE_EMAIL_COMMITS + 1))
                fi
              done
              
              echo "Found $UNIQUE_EMAIL_COMMITS additional unique commits by email"
              TOTAL_COMMITS=$((TOTAL_COMMITS + UNIQUE_EMAIL_COMMITS))
            fi
          fi
          
          # Check GitHub noreply email format
          NOREPLY_EMAIL="$GITHUB_USERNAME@users.noreply.github.com"
          NOREPLY_COMMITS=$(curl -s -H "Authorization: Bearer $COMMIT_COUNTER_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/search/commits?q=author-email:$NOREPLY_EMAIL+committer-date:$YESTERDAY_DATE&sort=committer-date&order=desc&per_page=100")
            
          NOREPLY_COMMIT_COUNT=$(echo "$NOREPLY_COMMITS" | jq '.total_count // 0')
          echo "Found $NOREPLY_COMMIT_COUNT commits by noreply email: $NOREPLY_EMAIL"
          
          # Add unique commits from noreply email search
          if [ "$NOREPLY_COMMIT_COUNT" -gt 0 ]; then
            # Extract SHAs from both previous queries
            ALL_SHAS="$SEARCH_SHAS $EMAIL_SHAS"
            NOREPLY_SHAS=$(echo "$NOREPLY_COMMITS" | jq -r '.items[].sha')
            
            # Count unique SHAs in NOREPLY_SHAS not in ALL_SHAS
            UNIQUE_NOREPLY_COMMITS=0
            for SHA in $NOREPLY_SHAS; do
              if ! echo "$ALL_SHAS" | grep -q "$SHA"; then
                UNIQUE_NOREPLY_COMMITS=$((UNIQUE_NOREPLY_COMMITS + 1))
              fi
            done
            
            echo "Found $UNIQUE_NOREPLY_COMMITS additional unique commits by noreply email"
            TOTAL_COMMITS=$((TOTAL_COMMITS + UNIQUE_NOREPLY_COMMITS))
          fi
          
          # Try alternate noreply format (numbered format)
          ALT_NOREPLY_COMMITS=$(curl -s -H "Authorization: Bearer $COMMIT_COUNTER_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/search/commits?q=author:$GITHUB_USERNAME+committer-date:$YESTERDAY_DATE+author-email:*noreply.github.com&sort=committer-date&order=desc&per_page=100")
            
          ALT_NOREPLY_COUNT=$(echo "$ALT_NOREPLY_COMMITS" | jq '.total_count // 0')
          echo "Found $ALT_NOREPLY_COUNT commits by other noreply email formats"
          
          # Calculate the total non-commit contributions
          OTHER_CONTRIBUTIONS=$((ISSUE_COUNT + PR_COUNT + COMMENT_COUNT + REVIEW_COUNT + CREATE_COUNT + DELETE_COUNT + FORK_COUNT + WATCH_COUNT))
          echo "Other contributions: $OTHER_CONTRIBUTIONS"
          
          # Calculate final total
          TODAY_CONTRIBUTIONS=$((TOTAL_COMMITS + OTHER_CONTRIBUTIONS))
          
          echo "Final contribution summary for $YESTERDAY_DATE:"
          echo "  Commits: $TOTAL_COMMITS"
          echo "  Issues: $ISSUE_COUNT"
          echo "  Pull Requests: $PR_COUNT"
          echo "  Comments: $COMMENT_COUNT"
          echo "  Reviews: $REVIEW_COUNT"
          echo "  Create events: $CREATE_COUNT"
          echo "  Delete events: $DELETE_COUNT"
          echo "  Fork events: $FORK_COUNT"
          echo "  Watch events: $WATCH_COUNT"
          echo "  Other contributions total: $OTHER_CONTRIBUTIONS"
          echo "  TOTAL CONTRIBUTIONS: $TODAY_CONTRIBUTIONS"
          
          # Store values for use in updating README
          echo "TODAY_CONTRIBUTIONS=$TODAY_CONTRIBUTIONS" >> $GITHUB_ENV
          echo "TODAY_COMMITS=$TOTAL_COMMITS" >> $GITHUB_ENV
          echo "OTHER_TODAY_CONTRIBUTIONS=$OTHER_CONTRIBUTIONS" >> $GITHUB_ENV

          # Now handle monthly counts (similar approach for monthly totals)
          MONTH_END_UTC=$(date -u -d "$(date +%Y-%m-01) +1 month -1 day 23:59:59 -7 hours" +%Y-%m-%dT%H:%M:%SZ)
          echo "Current month range: $MONTH_START_UTC to $MONTH_END_UTC"
          
          # Get previous month data from README
          PREV_MONTH_CONTRIBUTIONS=0
          PREV_MONTH_COMMITS=0
          
          if grep -q "<!-- MONTH_COMMITS:" faturrachman-dev/README.md; then
            PREV_MONTH_COMMITS=$(grep "<!-- MONTH_COMMITS:" faturrachman-dev/README.md | sed 's/<!-- MONTH_COMMITS: \([0-9]\+\) .* -->/\1/')
            PREV_MONTH=$(grep "<!-- MONTH_COMMITS:" faturrachman-dev/README.md | sed 's/<!-- MONTH_COMMITS: [0-9]\+ \(.*\) -->/\1/')
          fi

          if grep -q "<!-- MONTH_CONTRIBUTIONS:" faturrachman-dev/README.md; then
            PREV_MONTH_CONTRIBUTIONS=$(grep "<!-- MONTH_CONTRIBUTIONS:" faturrachman-dev/README.md | sed 's/<!-- MONTH_CONTRIBUTIONS: \([0-9]\+\) .* -->/\1/')
            PREV_MONTH_CONTR=$(grep "<!-- MONTH_CONTRIBUTIONS:" faturrachman-dev/README.md | sed 's/<!-- MONTH_CONTRIBUTIONS: [0-9]\+ \(.*\) -->/\1/')
          fi
          
          # Determine final month totals
          if [[ "$PREV_MONTH" != "$CURRENT_MONTH" || "$PREV_MONTH_CONTR" != "$CURRENT_MONTH" ]]; then
            echo "New month detected or first run, getting fresh month counts..."
            
            # Search for commits in the current month
            MONTH_COMMITS_SEARCH=$(curl -s -H "Authorization: Bearer $COMMIT_COUNTER_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/search/commits?q=author:$GITHUB_USERNAME+committer-date:>=$MONTH_START_UTC&sort=committer-date&order=desc&per_page=100")
              
            MONTH_COMMITS=$(echo "$MONTH_COMMITS_SEARCH" | jq '.total_count // 0')
            echo "Found $MONTH_COMMITS commits this month via search API"
            
            # Get other contribution counts for the month (simplified estimate)
            MONTH_CONTRIBUTIONS=$((MONTH_COMMITS + (MONTH_COMMITS / 3)))
            echo "Estimated month contributions: $MONTH_CONTRIBUTIONS"
          else
            echo "Same month, using previous counts plus today's contributions"
            # Use the stored counts and add today's to them
            MONTH_CONTRIBUTIONS=$((PREV_MONTH_CONTRIBUTIONS + TODAY_CONTRIBUTIONS))
            MONTH_COMMITS=$((PREV_MONTH_COMMITS + TOTAL_COMMITS))
          fi
          
          # Export month values to GitHub Actions environment
          echo "MONTH_CONTRIBUTIONS=$MONTH_CONTRIBUTIONS" >> $GITHUB_ENV
          echo "MONTH_COMMITS=$MONTH_COMMITS" >> $GITHUB_ENV
          echo "CURRENT_MONTH=$CURRENT_MONTH" >> $GITHUB_ENV

      - name: Update README
        run: |
          # Ensure values are numbers or default to 0
          TODAY_COMMITS=${TODAY_COMMITS:-0}
          TODAY_CONTRIBUTIONS=${TODAY_CONTRIBUTIONS:-0}
          MONTH_COMMITS=${MONTH_COMMITS:-0}
          MONTH_CONTRIBUTIONS=${MONTH_CONTRIBUTIONS:-0}
          
          # Update the placeholder in the comment line for today's commits
          if grep -q "<!-- TODAY_COMMITS:" faturrachman-dev/README.md; then
            sed -i "s/<!-- TODAY_COMMITS:.*-->/<!-- TODAY_COMMITS: $TODAY_COMMITS -->/g" faturrachman-dev/README.md
          else
            echo "<!-- TODAY_COMMITS: $TODAY_COMMITS -->" >> faturrachman-dev/README.md
            echo "![Today's Commits](https://img.shields.io/badge/Today's%20Commits-$TODAY_COMMITS-blue)" >> faturrachman-dev/README.md
          fi
          
          # Update the badge line for today's commits - check for both Today's and Yesterday's format
          if grep -q "Yesterday's%20Commits-.*-blue" faturrachman-dev/README.md; then
            sed -i "s/Yesterday's%20Commits-.*-blue/Today's%20Commits-$TODAY_COMMITS-blue/g" faturrachman-dev/README.md
          elif grep -q "Today's%20Commits-.*-blue" faturrachman-dev/README.md; then
            sed -i "s/Today's%20Commits-.*-blue/Today's%20Commits-$TODAY_COMMITS-blue/g" faturrachman-dev/README.md
          fi
          
          # Add today's total contributions
          if grep -q "<!-- TODAY_CONTRIBUTIONS:" faturrachman-dev/README.md; then
            sed -i "s/<!-- TODAY_CONTRIBUTIONS:.*-->/<!-- TODAY_CONTRIBUTIONS: $TODAY_CONTRIBUTIONS -->/g" faturrachman-dev/README.md
          else
            echo "<!-- TODAY_CONTRIBUTIONS: $TODAY_CONTRIBUTIONS -->" >> faturrachman-dev/README.md
            echo "![Today's Contributions](https://img.shields.io/badge/Today's%20Contributions-$TODAY_CONTRIBUTIONS-purple)" >> faturrachman-dev/README.md
          fi
          
          # Update the badge line for today's contributions - check for both Today's and Yesterday's format
          if grep -q "Yesterday's%20Contributions-.*-purple" faturrachman-dev/README.md; then
            sed -i "s/Yesterday's%20Contributions-.*-purple/Today's%20Contributions-$TODAY_CONTRIBUTIONS-purple/g" faturrachman-dev/README.md
          elif grep -q "Today's%20Contributions-.*-purple" faturrachman-dev/README.md; then
            sed -i "s/Today's%20Contributions-.*-purple/Today's%20Contributions-$TODAY_CONTRIBUTIONS-purple/g" faturrachman-dev/README.md
          fi

          # Update the placeholder in the comment line for monthly commits
          if grep -q "<!-- MONTH_COMMITS:" faturrachman-dev/README.md; then
            sed -i "s/<!-- MONTH_COMMITS:.*-->/<!-- MONTH_COMMITS: $MONTH_COMMITS $CURRENT_MONTH -->/g" faturrachman-dev/README.md
          else
            echo "<!-- MONTH_COMMITS: $MONTH_COMMITS $CURRENT_MONTH -->" >> faturrachman-dev/README.md
            echo "![This Month's Commits](https://img.shields.io/badge/This%20Month's%20Commits-$MONTH_COMMITS-green)" >> faturrachman-dev/README.md
          fi
          
          # Update the badge line for monthly commits
          if grep -q "This%20Month's%20Commits-.*-green" faturrachman-dev/README.md; then
            sed -i "s/This%20Month's%20Commits-.*-green/This%20Month's%20Commits-$MONTH_COMMITS-green/g" faturrachman-dev/README.md
          fi
          
          # Add monthly total contributions
          if grep -q "<!-- MONTH_CONTRIBUTIONS:" faturrachman-dev/README.md; then
            sed -i "s/<!-- MONTH_CONTRIBUTIONS:.*-->/<!-- MONTH_CONTRIBUTIONS: $MONTH_CONTRIBUTIONS $CURRENT_MONTH -->/g" faturrachman-dev/README.md
          else
            echo "<!-- MONTH_CONTRIBUTIONS: $MONTH_CONTRIBUTIONS $CURRENT_MONTH -->" >> faturrachman-dev/README.md
            echo "![This Month's Contributions](https://img.shields.io/badge/This%20Month's%20Contributions-$MONTH_CONTRIBUTIONS-orange)" >> faturrachman-dev/README.md
          fi
          
          # Update the badge line for monthly contributions
          if grep -q "This%20Month's%20Contributions-.*-orange" faturrachman-dev/README.md; then
            sed -i "s/This%20Month's%20Contributions-.*-orange/This%20Month's%20Contributions-$MONTH_CONTRIBUTIONS-orange/g" faturrachman-dev/README.md
          fi

      - name: Commit and Push Changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update GitHub contribution statistics"
          repository: faturrachman-dev
